#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('rsvc-be:server');
const http = require('http');
const dotenv = require('dotenv');
const socket = require('socket.io');

dotenv.config();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Chat implementation

const io = socket(server, {
  cors: {
    origin: 'https://65435bc58fec0a298711d4af--deluxe-brioche-1a9ed4.netlify.app/',
    credentials: true,
  },
});

global.onlineUsers = new Map();
io.on('connection', (socket) => {
  global.chatSocket = socket;
  console.log('SOCKET----------', socket ? socket?.id : 'no socket');
  socket.on('add-user', (userId) => {
    console.log('USER ID******************', userId ? userId : 'NO USER IDD');
    onlineUsers.set(userId, socket.id);
  });

  socket.on('send-msg', (data) => {
    console.log('SEND MESSAGE CALBACK*************', data ? data : 'no data');
    let sendUserSocket = onlineUsers.get(data.to);
    console.log('SEND USER SOCKET----------', sendUserSocket ? sendUserSocket : 'no send user socket');
    if (sendUserSocket) {
      socket.to(sendUserSocket).emit('msg-recieve', data.msg);
    } else {
      sendUserSocket = onlineUsers.get(data.from);
      socket.to(sendUserSocket).emit('msg-recieve', data.msg);
      console.log('User not found in onlineUsers map.');
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
